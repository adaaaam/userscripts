name: Update Greasy Fork users + jsDelivr requests shields root READMEs

on:
  schedule:
    - cron: "15 2 * * 0" # every Sunday 2:15a

jobs:
  update-usercount-shields:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout adamlui/userscripts
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.REPO_SYNC_PAT }}
          repository: adamlui/userscripts
          path: adamlui/userscripts

      - name: Fetch/sum GF user + JSD request counts
        id: get-stats
        run: |
          LC_NUMERIC=en_US # to insert commas

          declare -A gf_scripts=( # for Greasy Fork user counts
            ["460805"]="Autoclear ChatGPT History"
            ["462440"]="BraveGPT"
            ["466789"]="ChatGPT Auto-Continue"
            ["462422"]="ChatGPT Auto Refresh"
            ["465051"]="ChatGPT Infinity"
            ["461473"]="ChatGPT Widescreen Mode"
            ["459849"]="DuckDuckGPT"
            ["473377"]="GitHub Star History"
            ["473439"]="GitHub Widescreen"
            ["478597"]="GoogleGPT"
            ["12639"]="Hide Forum Images"
            ["456132"]="YouTube Classic"
          )

          jsd_gh_repos=( # for jsDelivr request counts
            "adamlui/userscripts" "adamlui/autoclear-chatgpt-history" "adamlui/chatgpt-auto-continnue"
            "adamlui/chatgpt-auto-refresh" "adamlui/chatgpt-infinity" "adamlui/chatgpt-widescreen"
            "adamlui/github-star-history" "adamlui/github-widescreen" "adamlui/youtube-classic"
            "KudoAI/bravegpt" "KudoAI/duckduckgpt" "KudoAI/googlegpt"
          )

          expand_num() { # expand nums abbreviated w/ 'k' or 'm' suffix to integers
            local num=$(echo "$1" | tr '[:upper:]' '[:lower:]') # convert to lowercase
            if [[ $num =~ k$ ]] ; then
              num="${num%k}" # remove 'k' suffix
              num=$(awk "BEGIN { printf \"%.0f\", $num * 1000 }") # multiply by 1000
            elif [[ $num =~ m$ ]] ; then
              num="${num%m}" # remove 'm' suffix
              num=$(awk "BEGIN { printf \"%.0f\", $num * 1000000 }") # multiply by 1000000
            fi ; echo "$num"
          }

          format_total() {
            local num=$1 ; first_digit="${num:0:1}" second_digit="${num:1:1}"
            second_digit=$(( second_digit < 5 ? 0 : 5 )) # round 2nd digit down
            if (( num >= 1000000000 )) ; then # 1B+ w/ one decimal place
              formatted_num="$(( num / 1000000000 ))"
              remainder=$(( (num % 1000000000) / 100000000 ))
              if (( remainder != 0 )) ; then formatted_num+=".$remainder" ; fi
              formatted_num+="B+"
            elif (( num >= 10000000 )) ; then # abbr 10,000,000+ to 999,000,000+
              formatted_num=$(printf "%'.f+" $((( num / 1000000 ) * 1000000 )))
            elif (( num >= 1000000 )) ; then # abbr 1,000,000+ to 9,500,000+
              formatted_num="${first_digit},${second_digit}00,000+"
            elif (( num >= 100000 )) ; then # abbr 100,000+ to 950,000+
              formatted_num="${first_digit}${second_digit}0,000+"
            elif (( num >= 10000 )) ; then # abbr 10,000+ to 90,000+
              formatted_num="${first_digit}0,000+"
            elif (( num >= 1000 )) ; then # abbr 1K to 9.9K
              formatted_num="$(( num / 1000 ))"
              remainder=$(( (num % 1000) / 100 ))
              if (( remainder != 0 )) ; then formatted_num+=".$remainder" ; fi
              formatted_num+="K"
            else formatted_num="$num" ; fi # preserve <1K as is
            echo "$formatted_num"
          }

          # Sort gf_scripts alphabetically for more readable logging
          sorted_gf_scripts=()
          for gf_script_id in "${!gf_scripts[@]}" ; do
            gf_script_name="${gf_scripts[$gf_script_id]}"
            gf_sorted_scripts+=("$gf_script_name:$gf_script_id")
          done
          IFS=$'\n' gf_sorted_scripts=($(sort <<<"${gf_sorted_scripts[*]}"))

          # Fetch/sum Greasy Fork user counts
          for tuple in "${gf_sorted_scripts[@]}" ; do
            gf_script_id="${tuple##*:}" gf_script_name="${tuple%%:*}"
            gf_users=$(curl -s "https://img.shields.io/greasyfork/dt/$gf_script_id" |
              sed -n 's/.*<title>installs: \([0-9.k]\+\)*<\/title>.*/\1/Ip')
            gf_users=$(expand_num "$gf_users")
            echo "$gf_script_name GF users: $gf_users"
            total_users=$((total_users + gf_users))
          done ; echo -e "\nTotal Greasy Fork users: $total_users\n"

          # Fetch/sum jsDelivr request counts
          for repo in "${jsd_gh_repos[@]}" ; do
            repo_requests=$(curl -s "https://img.shields.io/jsdelivr/gh/hm/$repo.svg" |
              sed -n -E 's|.*<title>jsdelivr: ([0-9,.km]+).*</title>.*|\1|Ip')
            repo_requests=$(expand_num "$repo_requests")
            echo "$repo jsDelivr hits: $repo_requests"
            total_requests=$((total_requests + repo_requests))
          done ; echo -e "\nTotal monthly jsDelivr requests: $total_requests\n"

          # Format totals
          formatted_total_users=$(format_total "$total_users")
          echo "Formatted total Greasy Fork users: $formatted_total_users"
          formatted_total_requests=$(format_total "$total_requests")
          echo "Formatted total monthly jsDelivr requests: $formatted_total_requests"

          # Store for update step next
          echo "total_users=$formatted_total_users" >> $GITHUB_OUTPUT
          echo "total_requests=$formatted_total_requests" >> $GITHUB_OUTPUT

      - name: Update README shields
        run: |
          cd ${{ github.workspace }}/adamlui/userscripts
          total_users="${{ steps.get-stats.outputs.total_users }}"
          total_requests=$(echo ${{ steps.get-stats.outputs.total_requests }})
          sed -i "s/\(badge\/[^-]*-\)[0-9.,km+]\+-/\1$total_users-/gI" $(find docs/ -name "README.md")
          if [ $? -eq 0 ] ; then echo "Usercount shields updated to $total_users"
          else echo "Usercount shields up-to-date already" ; fi
          if [ "$total_requests" != "0" ]; then
            sed -i -E "s|(badge/jsDelivr_[^-]+-)[0-9.,km+]+|\1$total_requests|Ig" $(find docs/ -name "README.md") ; fi

      - name: Push to adamlui/userscripts
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          push_options: --force
          add_options: --all
          commit_user_email: auto-sync@kudoai.com
          commit_author: kudo-sync-bot <auto-sync@kudoai.com>
          commit_message: Updated stats shield counters
          file_pattern: "**/README.md"
          repository: adamlui/userscripts
